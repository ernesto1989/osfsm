<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= __('flows_menu') %> - <%=scenario_id%> </title>
    <link rel="stylesheet" type="text/css" href="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-uWxY/CJNBR+1zjPWmfnSnVxwRheevXITnMqoEIeG1LJrdI0GlVs/9cVSyPYXdcSF" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-kQtW33rZJAHjgefvhyyzcGF3C5TFyBQBA13V1RKPf4uH+bwyzQxZ6CmMZHmNBEfJ" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        html,
        body{
            height: 100%;
        }
        
        .container-fluid {
            height:93%
        }

        #content-grid {
            margin:auto;
            width: 98%;
            height: 95%;
            padding: 2px;
        }
    </style>  
    <script type="module">

        import { w2grid, w2utils, w2form, w2ui, w2popup, w2alert, w2confirm } from 'https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.es6.min.js'
        let types =[];
        let isEdit = false;
        let region = '<%=region_id%>';
        let region_name = '<%=region_name%>';
        let scenarioId = '<%=scenario_id%>';
        


        $("document").ready(function(){
            $.get("<%=home_url%>/api/getFlows/<%=scenario_id%>", function(data, status){
                let recs = data.records;
                grid.records = recs;
                grid.refresh();
            });
        });

        function getNewEmptyRecord(){
            <%if(generator_nodes.length > 0 && container_nodes.length > 0 && consumer_nodes.length > 0) { %>         
                let genId = 1;

                if(grid.records.length > 0){
                    let lastElement = grid.records[grid.records.length - 1];
                    genId = lastElement.recid + 1;
                }
                let first_origin_node, first_destination_node;
                first_origin_node = {id:1,recid:<%=container_nodes[0].recid%>, text:'<%=container_nodes[0].node_id%>', origin_type: <%=container_nodes[0].node_type%>};
                first_destination_node = {id:2,recid:<%=container_nodes[1].recid%>, text:'<%=container_nodes[1].node_id%>', destination_type: <%=container_nodes[1].node_type%>};

                let record = {
                    flow_id:genId,
                    origin: first_origin_node,
                    destiny: first_destination_node,
                    description: '',
                    min_flow:0.0,
                    current_flow:0.0,
                    max_flow:0.0
                }
            <%} else {%>
                let record = {
                    
                }
            <%}%>

            return record;
        }

        function getSelectedRecord(){
            let selected = grid.getSelection();
            let rec = grid.get(selected)[0];

            let record = {
                flow_id:rec.recid,
                origin: {id:rec.origin_recid,text:rec.origin,origin_type:rec.origin_type},
                destiny: {id:rec.destiny_recid,text:rec.destiny, destination_type:rec.destiny_type},
                description: rec.flow_desc,
                flow_type:rec.name,
                min_flow:rec.fmin,
                current_flow:rec.current_flow,
                max_flow:rec.fmax
            }

            return record;
        }


        function setForm(record){
            let rec = {
                new_scenario_id : '<%=scenario_id%>',
                new_flow_id:record.flow_id,
                new_origin :record.origin, 
                new_destiny : record.destiny,
                new_desc: record.description,
                new_type: record.type,
                new_min_flow:record.min_flow,
                new_current_flow: record.current_flow,
                new_max_flow:record.max_flow
            };

            if(isEdit){
                if(record.flow_type === 'fixed'){ // fixed
                    w2ui.flowsForm.hide('new_min_flow','new_max_flow');
                }else{//variable
                    w2ui.flowsForm.show('new_min_flow','new_max_flow');
                }
                w2ui.flowsForm.disable('new_origin','new_destiny');
            }else{
                w2ui.flowsForm.show('new_min_flow','new_max_flow');
                w2ui.flowsForm.enable('new_origin','new_destiny');
            }

            w2ui.flowsForm.record = rec;
            w2ui.flowsForm.refresh();
        }

        function openFormPopup(){
            let flowsForm = new w2form({
                name: 'flowsForm',
                style: 'border: 0px; background-color: transparent;',
                fields: [
                    { field: 'new_scenario_id', type: 'text', required: true, hidden:true,
                        html: { label: 'Scenario Id', attr: 'readonly style="width: 100%";' }
                    },
                    { field: 'new_flow_id', type: 'text', required: true, hidden:true,
                        html: { label: 'Flow Id', attr: 'readonly style="width: 100%";' }
                    },
                    { field: 'new_origin', type: 'list',
                        html: { label: '<%= __("flow_origin_title") %>',attr: 'style="width: 100%"' },
                        options: { items: [
                            <% for(let i =0;i<generator_nodes.length;i++){%>
                            {id: <%=generator_nodes[i].recid%>,text:'<%=generator_nodes[i].node_id%>',origin_type: <%=generator_nodes[i].node_type%>}, 
                            <%}%>
                            <% for(let i =0;i<container_nodes.length;i++){%>
                            {id:<%=container_nodes[i].recid%>,text:'<%=container_nodes[i].node_id%>',origin_type: <%=container_nodes[i].node_type%>}, 
                            <%}%>
                        ]},
                    },
                    { field: 'new_destiny', type: 'list',
                        html: { label: '<%= __("flow_destiny_title") %>',attr: 'style="width: 100%"' },
                        options: { items: [
                            <% for(let i =0;i<container_nodes.length;i++){%>
                            {id: <%=container_nodes[i].recid%>,text:'<%=container_nodes[i].node_id%>',destination_type: <%=container_nodes[i].node_type%>}, 
                            <%}%>
                            <% for(let i =0;i<consumer_nodes.length;i++){%>
                            {id:<%=consumer_nodes[i].recid%>,text:'<%=consumer_nodes[i].node_id%>',destination_type: <%=consumer_nodes[i].node_type%>}, 
                            <%}%>
                        ]},
                    },
                    { field: 'new_desc', type: 'text',  
                        html: { label: '<%= __("flow_desc") %>', attr: 'style="width: 100%;" placeholder="About this flow"' }
                    },
                    { field: 'new_min_flow', type: 'float', required: true, editable:true, 
                        html: { label: '<%= __("min_flow") %>', attr: 'style="width: 100%";' }
                    },
                    { field: 'new_current_flow', type: 'float', required: true, editable:true, 
                        html: { label: '<%= __("curr_flow") %>', attr: 'style="width: 100%";' }
                    },
                    { field: 'new_max_flow', type: 'float', required: true, editable:true, 
                        html: { label: '<%= __("max_flow") %>', attr: 'style="width: 100%";' }
                    }
                ],
                onChange:function(event){
                    let modifiedField = event.target;
                    let origin = flowsForm.record.new_origin.text;
                    let destination = flowsForm.record.new_destiny.text;
                    let originType = flowsForm.record.new_origin.origin_type;
                    let destinationType = flowsForm.record.new_destiny.destination_type;

                    if(modifiedField === 'new_origin' && originType === 1){
                        //if im selecting a generator node, then the destination must be a container node.
                        if(destinationType === 3){
                            w2ui.flowsForm.record.new_destiny = {id:<%=container_nodes[0].recid%>,text:'<%=container_nodes[0].node_id%>',destination_type: <%=container_nodes[0].node_type%>};
                            w2ui.flowsForm.refresh();
                            destinationType = 2;
                            destination = flowsForm.record.new_destiny.text;
                            
                        }
                    }

                    if(modifiedField === 'new_destiny' && destinationType === 3){
                        //if im selecting a consumer node, then the origin must be a container node.
                        if(originType === 1){
                            w2ui.flowsForm.record.new_origin = {id:<%=container_nodes[0].recid%>,text:'<%=container_nodes[0].node_id%>',origin_type: <%=container_nodes[0].node_type%>};
                            w2ui.flowsForm.refresh();
                            originType = 2;
                            origin = flowsForm.record.new_origin.text;
                        }
                    }

                    if(origin === destination){
                        //can occur only if both nodes are container nodes.
                        w2alert('<%= __("same_node_error") %>');
                        return;
                    }

                    if(originType === 1 || destinationType === 3){
                        //flow will be fixed for V01 of OSF
                        w2ui.flowsForm.record.new_min_flow = 0.0;
                        w2ui.flowsForm.record.new_max_flow = 0.0;
                        w2ui.flowsForm.hide('new_min_flow','new_max_flow');
                        w2ui.flowsForm.refresh();

                    }else{
                        w2ui.flowsForm.show('new_min_flow','new_max_flow');
                        w2ui.flowsForm.refresh();
                    }
                },
                actions: {
                    Reset() { 
                        if(isEdit) 
                            setForm(getSelectedRecord());
                        else
                            setForm(getNewEmptyRecord());
                    },
                    Save() { 
                        this.validate(); 
                        let origin_type = flowsForm.record.new_origin.origin_type;
                        let destination_type = flowsForm.record.new_destiny.destination_type;
                        let origin = flowsForm.record.new_origin.text;
                        let destination = flowsForm.record.new_destiny.text;
                        let curr_min = flowsForm.record.new_min_flow;
                        let curr_vol = flowsForm.record.new_current_flow;
                        let curr_max = flowsForm.record.new_max_flow;

                        if(origin === destination){
                            w2alert('<%= __("same_node_error") %>');
                            return;
                        }

                        if(origin_type === 1 || destination_type === 3){
                            //flow will be fixed for V01 of OSF
                            curr_min = 0.0;
                            curr_max = 0.0;
                        } else {
                            if(curr_min > curr_max){
                                w2alert('<%= __("min_max_flow_error") %>');
                                return;
                            }

                            if( curr_min > curr_vol){
                                w2alert('<%= __("min_curr_flow_error") %>');
                                return;
                            }

                            if(curr_vol > curr_max){
                                w2alert('<%= __("curr_max_flow_error") %>');
                                return;
                            }
                        }

                        let flow = {
                            new_record:!isEdit,
                            scenario_id:flowsForm.record.new_scenario_id,
                            id:flowsForm.record.new_flow_id,
                            origin:flowsForm.record.new_origin.text,
                            origin_type: flowsForm.record.new_origin.origin_type,
                            destiny:flowsForm.record.new_destiny.text,
                            destiny_type: flowsForm.record.new_destiny.destination_type,
                            flow_desc:flowsForm.record.new_desc,
                            fmin: curr_min ,
                            current_flow: curr_vol,
                            fmax: curr_max
                        }

                        //post to web service and on return, reload page.
                        $.ajax({
                            url:'<%=home_url%>/api/saveFlow',
                            type:'POST',
                            data:JSON.stringify(flow),
                            dataType:"json",
                            contentType:"application/json; charset=utf-8",
                            success:function(response){
                                if(response)
                                    window.location.reload();
                                else
                                    alert("Something went wrong")
                            }
                        });
                    }
                }
            });

            w2popup.open({
                title   : 'Flows Form',
                body    : '<div id="flowsForm" style="width: 100%; height: 100%;"></div>',
                style   : 'padding: 15px 0px 0px 0px',
                width   : 400,
                height  : 480,
                showMax : false
            })
            .then((event) => {
                w2ui.flowsForm.render('#flowsForm');
                if(isEdit) 
                    setForm(getSelectedRecord());
                else
                    setForm(getNewEmptyRecord());

            });
        };

        let grid = new w2grid({
            name: 'grid',
            box: '#content-grid',
            header  : '<%=region_name%> <%= __("flows_menu") %> - <%=scenario_id%> - <%= __("cap_units_msg") %> <%=capacity_units%> -  <%= __("time_units_msg") %> <%=time_units%>',
            show: {
                header:true,
                toolbar: true,
                // < % if(user_info.role.name === 'admin' && scenarioId === base_scenario ){ % >
                //if user is admin and is in the base scenario, then can CRUD the nodes
                toolbarAdd: true,
                toolbarEdit: true,
                toolbarDelete: true
                // < % }  % >
            },
            searches: [
                { field: 'origin', label: 'Origin', type: 'text' },
                { field: 'destiny', label: 'Destiny', type: 'text' },
                { field: 'type', label: 'Type', type: 'list',
                   options:{
                        items:[
                            <% for(let i =0;i<flow_types.length;i++){%>
                            '<%=flow_types[i].type%>', 
                            <%}%>
                        ]
                   }
                }
            ],          
            columns: [
                { field: 'recid', text: 'Id', hidden:true },
                { field: 'origin_recid', hidden:true },
                { field: 'origin_type', hidden:true },
                { field: 'origin', text: '<%= __("flow_origin_title") %>',sortable:true, size:'10%' },
                { field: 'destiny_recid', hidden:true },
                { field: 'destiny_type', hidden:true },
                { field: 'destiny', text: '<%= __("flow_destiny_title") %>',sortable:true, size:'10%' },
                { field: 'flow_desc', text: '<%= __("flow_desc") %>',sortable:false, size:'24%' },
                { field: 'type_id', hidden:true },
                { field: 'name', text: '<%= __("flow_type") %>', size:'11%' },
                { field: 'fmin', text: '<%= __("min_flow") %> (<%=capacity_units%>/<%=time_units%>)', size:'15%',sortable:true,render:'float:02' },
                { field: 'current_flow', text: '<%= __("curr_flow") %> (<%=capacity_units%>/<%=time_units%>)',sortable:true, size:'15%',render:'float:02' },
                { field: 'fmax', text: '<%= __("max_flow") %> (<%=capacity_units%>/<%=time_units%>)', size:'15%',sortable:true,render:'float:02' }
            ],
            // onClick: function(event){
            //     < % if(recalcSolution === 0 && scenarioId !== base_scenario) { % >
            //         //recalc solution is zero, so no changes must be done.
            //         event.onComplete = function(){
            //             this.toolbar.disable("w2ui-edit");
            //             this.toolbar.disable("w2ui-delete");
            //         }
            //     < % } % >
            // },
            onAdd: function (event) {
                <%if(generator_nodes.length === 0 || container_nodes.length === 0 || consumer_nodes.length === 0) { %>   
                    w2alert("<%= __('no_nodes_error') %>");
                <%} else {%>
                    event.preventDefault();
                    isEdit = false;
                    openFormPopup();
                <%}%>
            },
            onEdit: function (event) {
                event.preventDefault();
                isEdit = true;
                openFormPopup();
            },
            onDelete: function (event) {
                event.preventDefault();
                let selected = grid.getSelection();
                let rec = grid.get(selected)[0];

                /*
                    According to the model, the IN node is 0 and the OUT node is 0
                    so we need to change the values to match the model.
                */
                // if(rec.origin_node === 'IN')
                //     rec.origin = 0;
                // if(rec.destiny_node === 'OUT')
                //     rec.destiny = 0;

                let flow = {
                  scenario_id : '<%=scenario_id%>',
                  id: rec.recid
                };
                
                w2confirm({
                    msg: '<%= __("delete_flow_msg") %>',
                    title: '<%= __("delete_flow_title") %>',
                    width: 450,        // width of the dialog
                    height: 220,       // height of the dialog
                    btn_yes: {
                        text: '<%= __("yes") %>',   // text for yes button (or yes_text)
                        class: 'btn-danger',     // class for yes button (or yes_class)
                        style: 'background-color:red;',     // style for yes button (or yes_style)
                        onClick: null  // callBack for yes button (or yes_callBack)
                    },
                    btn_no: {
                        text: '<%= __("no") %>',    // text for no button (or no_text)
                        class: '',     // class for no button (or no_class)
                        style: '',     // style for no button (or no_style)
                        onClick: null  // callBack for no button (or no_callBack)
                    },
                    callBack: function(answer){
                        if(answer === '<%= __("yes") %>'){
                            $.post('<%=home_url%>/api/deleteFlow', flow, function(respuesta){
                                if(respuesta)
                                    window.location.reload();
                                else
                                    alert("Something went wrong")
                            });
                        } 
                    }
                });
            }
        });
    </script>
</head>
<body>
    <div class="container-fluid" style="width:100%;height:100%;">
        <div id="content-grid" style="width:95%;height:95%;margin: 5px;">
        </div>
    </div>
</body>
</html>